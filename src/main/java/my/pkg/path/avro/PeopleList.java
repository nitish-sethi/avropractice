/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package my.pkg.path.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PeopleList extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2685040089728837458L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PeopleList\",\"namespace\":\"my.pkg.path.avro\",\"fields\":[{\"name\":\"Version\",\"type\":\"int\"},{\"name\":\"People\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Person\",\"fields\":[{\"name\":\"FirstName\",\"type\":\"string\"},{\"name\":\"LastName\",\"type\":\"string\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PeopleList> ENCODER =
      new BinaryMessageEncoder<PeopleList>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PeopleList> DECODER =
      new BinaryMessageDecoder<PeopleList>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PeopleList> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PeopleList> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PeopleList>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PeopleList to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PeopleList from a ByteBuffer. */
  public static PeopleList fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int Version;
  @Deprecated public java.util.List<my.pkg.path.avro.Person> People;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PeopleList() {}

  /**
   * All-args constructor.
   * @param Version The new value for Version
   * @param People The new value for People
   */
  public PeopleList(java.lang.Integer Version, java.util.List<my.pkg.path.avro.Person> People) {
    this.Version = Version;
    this.People = People;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Version;
    case 1: return People;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Version = (java.lang.Integer)value$; break;
    case 1: People = (java.util.List<my.pkg.path.avro.Person>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Version' field.
   * @return The value of the 'Version' field.
   */
  public java.lang.Integer getVersion() {
    return Version;
  }

  /**
   * Sets the value of the 'Version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.Integer value) {
    this.Version = value;
  }

  /**
   * Gets the value of the 'People' field.
   * @return The value of the 'People' field.
   */
  public java.util.List<my.pkg.path.avro.Person> getPeople() {
    return People;
  }

  /**
   * Sets the value of the 'People' field.
   * @param value the value to set.
   */
  public void setPeople(java.util.List<my.pkg.path.avro.Person> value) {
    this.People = value;
  }

  /**
   * Creates a new PeopleList RecordBuilder.
   * @return A new PeopleList RecordBuilder
   */
  public static my.pkg.path.avro.PeopleList.Builder newBuilder() {
    return new my.pkg.path.avro.PeopleList.Builder();
  }

  /**
   * Creates a new PeopleList RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PeopleList RecordBuilder
   */
  public static my.pkg.path.avro.PeopleList.Builder newBuilder(my.pkg.path.avro.PeopleList.Builder other) {
    return new my.pkg.path.avro.PeopleList.Builder(other);
  }

  /**
   * Creates a new PeopleList RecordBuilder by copying an existing PeopleList instance.
   * @param other The existing instance to copy.
   * @return A new PeopleList RecordBuilder
   */
  public static my.pkg.path.avro.PeopleList.Builder newBuilder(my.pkg.path.avro.PeopleList other) {
    return new my.pkg.path.avro.PeopleList.Builder(other);
  }

  /**
   * RecordBuilder for PeopleList instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PeopleList>
    implements org.apache.avro.data.RecordBuilder<PeopleList> {

    private int Version;
    private java.util.List<my.pkg.path.avro.Person> People;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(my.pkg.path.avro.PeopleList.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Version)) {
        this.Version = data().deepCopy(fields()[0].schema(), other.Version);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.People)) {
        this.People = data().deepCopy(fields()[1].schema(), other.People);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PeopleList instance
     * @param other The existing instance to copy.
     */
    private Builder(my.pkg.path.avro.PeopleList other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Version)) {
        this.Version = data().deepCopy(fields()[0].schema(), other.Version);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.People)) {
        this.People = data().deepCopy(fields()[1].schema(), other.People);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'Version' field.
      * @return The value.
      */
    public java.lang.Integer getVersion() {
      return Version;
    }

    /**
      * Sets the value of the 'Version' field.
      * @param value The value of 'Version'.
      * @return This builder.
      */
    public my.pkg.path.avro.PeopleList.Builder setVersion(int value) {
      validate(fields()[0], value);
      this.Version = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Version' field has been set.
      * @return True if the 'Version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Version' field.
      * @return This builder.
      */
    public my.pkg.path.avro.PeopleList.Builder clearVersion() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'People' field.
      * @return The value.
      */
    public java.util.List<my.pkg.path.avro.Person> getPeople() {
      return People;
    }

    /**
      * Sets the value of the 'People' field.
      * @param value The value of 'People'.
      * @return This builder.
      */
    public my.pkg.path.avro.PeopleList.Builder setPeople(java.util.List<my.pkg.path.avro.Person> value) {
      validate(fields()[1], value);
      this.People = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'People' field has been set.
      * @return True if the 'People' field has been set, false otherwise.
      */
    public boolean hasPeople() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'People' field.
      * @return This builder.
      */
    public my.pkg.path.avro.PeopleList.Builder clearPeople() {
      People = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PeopleList build() {
      try {
        PeopleList record = new PeopleList();
        record.Version = fieldSetFlags()[0] ? this.Version : (java.lang.Integer) defaultValue(fields()[0]);
        record.People = fieldSetFlags()[1] ? this.People : (java.util.List<my.pkg.path.avro.Person>) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PeopleList>
    WRITER$ = (org.apache.avro.io.DatumWriter<PeopleList>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PeopleList>
    READER$ = (org.apache.avro.io.DatumReader<PeopleList>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
